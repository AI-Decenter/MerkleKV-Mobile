name: Mobile E2E Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/merkle_kv_core/**'
      - 'apps/flutter_demo/**'
      - 'test/e2e/**'
      - '.github/workflows/mobile-e2e-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/merkle_kv_core/**'
      - 'apps/flutter_demo/**'
      - 'test/e2e/**'
      - '.github/workflows/mobile-e2e-tests.yml'
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - lifecycle
          - network
          - convergence
      device_pool:
        description: 'Device pool to use'
        required: false
        default: 'cloud'
        type: choice
        options:
          - cloud
          - local
          - emulator

env:
  FLUTTER_VERSION: '3.16.0'
  DART_VERSION: '3.2.0'
  NODE_VERSION: '18'
  APPIUM_VERSION: '2.0.0'

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.test_matrix.outputs.matrix }}
      device_config: ${{ steps.device_config.outputs.config }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test matrix
        id: test_matrix
        run: |
          if [ "${{ github.event.inputs.test_suite }}" = "lifecycle" ]; then
            MATRIX='["mobile_lifecycle_scenarios"]'
          elif [ "${{ github.event.inputs.test_suite }}" = "network" ]; then
            MATRIX='["network_state_test"]'
          elif [ "${{ github.event.inputs.test_suite }}" = "convergence" ]; then
            MATRIX='["mobile_convergence_test"]'
          else
            MATRIX='["mobile_lifecycle_scenarios", "network_state_test", "mobile_convergence_test"]'
          fi
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

      - name: Setup device configuration
        id: device_config
        run: |
          if [ "${{ github.event.inputs.device_pool }}" = "local" ]; then
            CONFIG='{"pool": "local", "devices": ["android_emulator", "ios_simulator"]}'
          elif [ "${{ github.event.inputs.device_pool }}" = "emulator" ]; then
            CONFIG='{"pool": "emulator", "devices": ["android_emulator"]}'
          else
            CONFIG='{"pool": "cloud", "devices": ["android_real", "ios_real"]}'
          fi
          echo "config=$CONFIG" >> $GITHUB_OUTPUT

  android_e2e:
    name: Android E2E Tests
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_suite: ${{ fromJson(needs.setup.outputs.test_matrix) }}
        api_level: [29, 33]
    env:
      DEVICE_POOL: ${{ fromJson(needs.setup.outputs.device_config).pool }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          # Install MQTT tools and system dependencies
          sudo apt-get update
          sudo apt-get install -y mosquitto-clients
          
          # Install Node.js dependencies
          npm install
          
          # Install Dart dependencies
          cd packages/merkle_kv_core
          dart pub get
          cd ../../
          
          # Install Flutter dependencies
          cd apps/flutter_demo
          flutter pub get
          cd ../../

      - name: Install Appium and drivers
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium driver install uiautomator2
          appium driver install xcuitest

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '11076708'
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

      - name: Setup Android environment
        run: |
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "/usr/local/lib/android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
          echo "/usr/local/lib/android/sdk/tools/bin" >> $GITHUB_PATH

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Create Android emulator
        if: env.DEVICE_POOL != 'cloud'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api_level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          cores: 2
          ram-size: 4096M
          heap-size: 512M
          sdcard-path-or-size: 100M
          disable-animations: true
          disable-spellchecker: true
          script: echo "Emulator started"

      - name: Start MQTT broker
        run: |
          docker run -d --name test-mosquitto -p 1883:1883 eclipse-mosquitto:1.6
          # Wait for broker to be ready
          sleep 5
          ./scripts/mqtt_health_check.sh

      - name: Start Appium server
        run: |
          appium server --port 4723 --allow-cors &
          sleep 10

      - name: Build Flutter app for testing
        run: |
          cd apps/flutter_demo
          flutter build apk --debug
          cd ../../

      - name: Run Android E2E tests (cloud)
        if: env.DEVICE_POOL == 'cloud'
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: |
          cd test/e2e
          dart run ../../scripts/run_e2e_tests.dart --platform android --suite ${{ matrix.test_suite }} --cloud browserstack

      - name: Run Android E2E tests (emulator)
        if: env.DEVICE_POOL == 'emulator'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api_level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          cores: 2
          ram-size: 4096M
          heap-size: 512M
          sdcard-path-or-size: 100M
          disable-animations: true
          disable-spellchecker: true
          script: |
            cd test/e2e
            dart run ../../scripts/run_e2e_tests.dart --platform android --suite ${{ matrix.test_suite }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-e2e-results-${{ matrix.test_suite }}-api${{ matrix.api_level }}
          path: |
            test/e2e/reports/
            test/e2e/screenshots/
            test/e2e/logs/

      - name: Upload APK artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-${{ matrix.test_suite }}-api${{ matrix.api_level }}
          path: apps/flutter_demo/build/app/outputs/flutter-apk/app-debug.apk

  ios_e2e:
    name: iOS E2E Tests
    needs: setup
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        test_suite: ${{ fromJson(needs.setup.outputs.test_matrix) }}
        ios_version: ['16.4', '17.0']
    env:
      DEVICE_POOL: ${{ fromJson(needs.setup.outputs.device_config).pool }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          # Install MQTT tools and system dependencies
          brew install mosquitto
          
          # Install Node.js dependencies
          npm install
          
          # Install Dart dependencies
          cd packages/merkle_kv_core
          dart pub get
          cd ../../
          
          # Install Flutter dependencies
          cd apps/flutter_demo
          flutter pub get
          cd ../../

      - name: Install Appium and drivers
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium driver install xcuitest

      - name: Setup iOS simulator
        if: env.DEVICE_POOL != 'cloud'
        run: |
          xcrun simctl create "iPhone 14" "iPhone 14" "iOS${{ matrix.ios_version }}"
          xcrun simctl boot "iPhone 14"

      - name: Start MQTT broker
        run: |
          docker run -d --name test-mosquitto -p 1883:1883 eclipse-mosquitto:1.6
          sleep 5
          ./scripts/mqtt_health_check.sh

      - name: Start Appium server
        run: |
          appium server --port 4723 --allow-cors &
          sleep 10

      - name: Build Flutter app for testing
        run: |
          cd apps/flutter_demo
          flutter build ios --simulator --debug
          cd ../../

      - name: Run iOS E2E tests (simulator)
        if: env.DEVICE_POOL != 'cloud'
        run: |
          cd test/e2e
          dart run ../../scripts/run_e2e_tests.dart --platform ios --suite ${{ matrix.test_suite }}

      - name: Run iOS E2E tests (cloud)
        if: env.DEVICE_POOL == 'cloud'
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: |
          cd test/e2e
          dart run ../../scripts/run_e2e_tests.dart --platform ios --suite ${{ matrix.test_suite }} --cloud browserstack

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-e2e-results-${{ matrix.test_suite }}-${{ matrix.ios_version }}
          path: |
            test/e2e/reports/
            test/e2e/screenshots/
            test/e2e/logs/

      - name: Upload iOS app artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-ios-app-${{ matrix.test_suite }}-${{ matrix.ios_version }}
          path: apps/flutter_demo/build/ios/iphonesimulator/Runner.app

  flutter_integration:
    name: Flutter Integration Tests
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [android, ios]
        test_suite: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17 (Android only)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          # Install MQTT tools and system dependencies
          sudo apt-get update
          sudo apt-get install -y mosquitto-clients
          
          cd apps/flutter_demo
          flutter pub get
          cd ../../

      - name: Setup Android emulator (Android only)
        if: matrix.platform == 'android'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          profile: Nexus 6
          script: echo "Emulator ready for integration tests"

      - name: Start MQTT broker
        run: |
          docker run -d --name test-mosquitto -p 1883:1883 eclipse-mosquitto:1.6
          sleep 5
          ./scripts/mqtt_health_check.sh

      - name: Run Flutter integration tests (Android)
        if: matrix.platform == 'android'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          profile: Nexus 6
          script: |
            cd apps/flutter_demo
            flutter test integration_test/merkle_kv_integration_test.dart

      - name: Run Flutter integration tests (iOS - dry run)
        if: matrix.platform == 'ios'
        run: |
          cd apps/flutter_demo
          # iOS integration tests would run on macOS with simulators
          flutter test --dart-define=PLATFORM=ios integration_test/merkle_kv_integration_test.dart || echo "iOS tests require macOS runner"

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-integration-results-${{ matrix.platform }}-${{ matrix.test_suite }}
          path: |
            apps/flutter_demo/test_results/
            apps/flutter_demo/integration_test/reports/

  test_report:
    name: Generate Test Report
    needs: [android_e2e, ios_e2e, flutter_integration]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test_artifacts/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install report generator
        run: npm install -g allure-commandline

      - name: Generate consolidated test report
        run: |
          mkdir -p consolidated_report
          # This would aggregate all test results into a unified report
          echo "# Mobile E2E Test Results" > consolidated_report/README.md
          echo "Generated at: $(date)" >> consolidated_report/README.md
          echo "" >> consolidated_report/README.md
          
          # List all test artifacts
          echo "## Test Artifacts:" >> consolidated_report/README.md
          find test_artifacts/ -name "*.json" -o -name "*.xml" -o -name "*.html" | while read file; do
            echo "- $file" >> consolidated_report/README.md
          done

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-e2e-report
          path: consolidated_report/

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'consolidated_report/README.md';
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## 📱 Mobile E2E Test Results\n\n' + report
              });
            }

  cleanup:
    name: Cleanup Resources
    needs: [android_e2e, ios_e2e, flutter_integration]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup MQTT brokers
        run: |
          docker stop test-mosquitto || true
          docker rm test-mosquitto || true

      - name: Cleanup Appium processes
        run: |
          pkill -f appium || true

      - name: Report workflow status
        run: |
          echo "Mobile E2E test workflow completed"
          echo "Check individual job results for detailed information"